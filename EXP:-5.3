#!/bin/bash
# deploy.sh - Deployment script for AWS Full Stack Application

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
STACK_NAME="fullstack-app"
TEMPLATE_FILE="cloudformation-template.yaml"
ENVIRONMENT="production"
REGION="us-east-1"

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check AWS CLI installation
check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed. Please install it first."
        exit 1
    fi
    print_info "AWS CLI found"
}

# Validate CloudFormation template
validate_template() {
    print_info "Validating CloudFormation template..."
    aws cloudformation validate-template \
        --template-body file://${TEMPLATE_FILE} \
        --region ${REGION} > /dev/null
    print_info "Template validation successful"
}

# Create or update stack
deploy_stack() {
    print_info "Deploying CloudFormation stack: ${STACK_NAME}"
    
    # Check if stack exists
    if aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --region ${REGION} &> /dev/null; then
        
        print_warning "Stack exists. Updating..."
        aws cloudformation update-stack \
            --stack-name ${STACK_NAME} \
            --template-body file://${TEMPLATE_FILE} \
            --parameters \
                ParameterKey=EnvironmentName,ParameterValue=${ENVIRONMENT} \
                ParameterKey=KeyName,ParameterValue=${EC2_KEY_NAME} \
                ParameterKey=DBUsername,ParameterValue=${DB_USERNAME} \
                ParameterKey=DBPassword,ParameterValue=${DB_PASSWORD} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${REGION}
        
        print_info "Waiting for stack update to complete..."
        aws cloudformation wait stack-update-complete \
            --stack-name ${STACK_NAME} \
            --region ${REGION}
    else
        print_info "Creating new stack..."
        aws cloudformation create-stack \
            --stack-name ${STACK_NAME} \
            --template-body file://${TEMPLATE_FILE} \
            --parameters \
                ParameterKey=EnvironmentName,ParameterValue=${ENVIRONMENT} \
                ParameterKey=KeyName,ParameterValue=${EC2_KEY_NAME} \
                ParameterKey=DBUsername,ParameterValue=${DB_USERNAME} \
                ParameterKey=DBPassword,ParameterValue=${DB_PASSWORD} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${REGION}
        
        print_info "Waiting for stack creation to complete..."
        aws cloudformation wait stack-create-complete \
            --stack-name ${STACK_NAME} \
            --region ${REGION}
    fi
    
    print_info "Stack deployment completed successfully"
}

# Get stack outputs
get_outputs() {
    print_info "Retrieving stack outputs..."
    
    ALB_DNS=$(aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --query 'Stacks[0].Outputs[?OutputKey==LoadBalancerDNS].OutputValue' \
        --output text \
        --region ${REGION})
    
    CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --query 'Stacks[0].Outputs[?OutputKey==CloudFrontURL].OutputValue' \
        --output text \
        --region ${REGION})
    
    DB_ENDPOINT=$(aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --query 'Stacks[0].Outputs[?OutputKey==DatabaseEndpoint].OutputValue' \
        --output text \
        --region ${REGION})
    
    BUCKET_NAME=$(aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --query 'Stacks[0].Outputs[?OutputKey==FrontendBucketName].OutputValue' \
        --output text \
        --region ${REGION})
    
    echo ""
    print_info "=== Deployment Information ==="
    echo "Load Balancer DNS: ${ALB_DNS}"
    echo "CloudFront URL: https://${CLOUDFRONT_URL}"
    echo "Database Endpoint: ${DB_ENDPOINT}"
    echo "Frontend Bucket: ${BUCKET_NAME}"
    echo ""
}

# Build and deploy frontend
deploy_frontend() {
    print_info "Building frontend application..."
    
    cd frontend
    npm install
    npm run build
    
    print_info "Deploying frontend to S3..."
    aws s3 sync dist/ s3://${BUCKET_NAME}/ \
        --delete \
        --cache-control "public, max-age=31536000" \
        --region ${REGION}
    
    print_info "Invalidating CloudFront cache..."
    DISTRIBUTION_ID=$(aws cloudfront list-distributions \
        --query "DistributionList.Items[?Origins.Items[0].DomainName=='${BUCKET_NAME}.s3.amazonaws.com'].Id" \
        --output text)
    
    aws cloudfront create-invalidation \
        --distribution-id ${DISTRIBUTION_ID} \
        --paths "/*" \
        --region ${REGION}
    
    cd ..
    print_info "Frontend deployment completed"
}

# Build and push Docker image
deploy_backend() {
    print_info "Building backend Docker image..."
    
    # Get ECR repository URI (assuming you have one)
    ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    ECR_REPO="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${STACK_NAME}-backend"
    
    # Login to ECR
    aws ecr get-login-password --region ${REGION} | \
        docker login --username AWS --password-stdin ${ECR_REPO}
    
    # Build and push
    cd backend
    docker build -t ${STACK_NAME}-backend:latest .
    docker tag ${STACK_NAME}-backend:latest ${ECR_REPO}:latest
    docker push ${ECR_REPO}:latest
    
    cd ..
    print_info "Backend deployment completed"
}

# Database migration
run_migrations() {
    print_info "Running database migrations..."
    
    # Get a bastion host or use Systems Manager to run migrations
    # This is a placeholder - implement based on your migration tool
    print_warning "Database migrations should be run manually or via CI/CD pipeline"
}

# Health check
health_check() {
    print_info "Running health checks..."
    
    MAX_ATTEMPTS=30
    ATTEMPT=0
    
    while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${ALB_DNS}/health)
        
        if [ "$HTTP_CODE" == "200" ]; then
            print_info "Health check passed!"
            return 0
        fi
        
        ATTEMPT=$((ATTEMPT + 1))
        print_warning "Health check attempt ${ATTEMPT}/${MAX_ATTEMPTS} failed. Retrying..."
        sleep 10
    done
    
    print_error "Health check failed after ${MAX_ATTEMPTS} attempts"
    return 1
}

# Rollback function
rollback() {
    print_warning "Initiating rollback..."
    
    aws cloudformation cancel-update-stack \
        --stack-name ${STACK_NAME} \
        --region ${REGION}
    
    print_info "Rollback initiated"
}

# Cleanup function
cleanup() {
    print_info "Cleaning up resources..."
    
    # Empty S3 bucket before deletion
    aws s3 rm s
